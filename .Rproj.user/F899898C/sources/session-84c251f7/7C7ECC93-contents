#######################################################################
# Filename: Markovmodel.R
# Created by: Mahip
# Date created: 05/01/2025
# Purpose: Creating a Markov model for hypertension as a shiny app
#######################################################################

# Installing and loading packages
loadpackages <- function(packagename) {
  if (!suppressWarnings(require(packagename, character.only = TRUE))) {
    install.packages(packagename)
    # Load the package
    library(packagename, character.only = TRUE)
  } else {
    library(packagename, character.only = TRUE)
  }
}

# Loading the required packages
loadpackages("pdftools")
loadpackages("readxl")

# Loading the shiny library
library(shiny)

# UI for the application
ui <- fluidPage(

  # Application title
  titlePanel("Cost-effectiveness analysis"),
  fluidRow(
    column(
      12,
      tabsetPanel(
        id = "tabset",
        tabPanel(
          "Import model (pdf file)",
          fileInput("modelstructure", "Model structure (pdf)", accept = "application/pdf")
        ),
        tabPanel(
          "Import data",
          fileInput("transitionrates", "Transition rates", accept = ".xlsx", buttonLabel = "Upload..."),
          fileInput("hazardratios", "Hazard ratios for death", accept = ".xlsx", buttonLabel = "Upload..."),
          fileInput("hazardratios_treat", "Hazard ratios for treatment", accept = ".xlsx", buttonLabel = "Upload..."),
          fileInput("backmortality", "Background mortality probabilities", accept = ".xlsx", buttonLabel = "Upload..."),
          fileInput("costs", "Healthcare costs", accept = ".xlsx", buttonLabel = "Upload..."),
          fileInput("costs_treat", "Healthcare costs for treatment", accept = ".xlsx", buttonLabel = "Upload..."),
          fileInput("utilities", "Utilities", accept = ".xlsx", buttonLabel = "Upload..."),
          fileInput("utility_multiplier", "Utility multiplier for age", accept = ".xlsx", buttonLabel = "Upload...")
        ),
        tabPanel(
          "Number of cycles",
          sliderInput("n_cycles", "Number of monthly cycles", value = 100, min = 12, max = 420)
        ),
        tabPanel(
          "Annual discounting rate",
          sliderInput("r_annual_discount", "Annual discounting (%)", value = 3, min = 0, max = 5)
        )
      )
    )
  ),
  fluidRow(
    column(
      12,
      tableOutput("ICER")
    )
  )
)

# Function for input of model structure
load_modelstructure <- function(name, path) {
  ext <- tools::file_ext(name)
  switch(ext,
    pdf = pdf_text(path),
    validate("Invalid file. Please upload a .pdf file for the model structure")
  )
}

# Function for input of excel files (model input parameters)
load_file <- function(name, path) {
  ext <- tools::file_ext(name)
  switch(ext,
    xlsx = read_excel(path),
    validate("Invalid file. Please upload a .xlsx file")
  )
}


# Server for the application
server <- function(input, output, session) {
  # Extracting model structure
  extract_modeltext <- reactive({
    req(input$modelstructure)
    load_modelstructure(input$modelstructure$name, input$modelstructure$datapath)
  })

  # Extracting states from the model structure
  extract_modelstates <- reactive({
    # Trimming trailing and leading spaces
    extracttextpdf1 <- trimws(extract_modeltext())

    # Splitting the string to its components in a list format
    extracttextpdf1a <- strsplit(extracttextpdf1, "\\s+|\n")

    # Number of states
    n_states <- length(extracttextpdf1a[[1]])

    # Create a vector of all the states
    v_states <- unlist(extracttextpdf1a)

    # Combining the outputs into a list and returning it
    return(list(n_states = n_states, v_states = v_states))
  })

  # Extracting transition rates
  df_transitionrates <- reactive({
    req(input$transitionrates)
    load_file(input$transitionrates$name, input$transitionrates$datapath)
  })

  # Processing the transition rates dataframe
  df_transitionrates1 <- reactive({
    # Converting the annual rates to monthly rates and then to monthly probabilities
    df_transitionprobs <- df_transitionrates()
    df_transitionprobs$MonthlyRate <- (df_transitionprobs$AnnualRate) / 12
    df_transitionprobs$MonthlyProb <- 1 - exp(-(df_transitionprobs$AnnualRate) / 12)
    return(df_transitionprobs)
  })

  # Extracting hazard ratios
  df_hazardratios <- reactive({
    req(input$hazardratios)
    load_file(input$hazardratios$name, input$hazardratios$datapath)
  })

  # Extracting treatment-related hazard ratios
  df_hazardratios_treat <- reactive({
    req(input$hazardratios_treat)
    load_file(input$hazardratios_treat$name, input$hazardratios_treat$datapath)
  })

  # Extracting background mortality
  df_backgroundmortality <- reactive({
    req(input$backmortality)
    load_file(input$backmortality$name, input$backmortality$datapath)
  })

  # Processing the background mortality dataframe
  df_backgroundmortality1 <- reactive({
    df_backgroundmortality1 <- df_backgroundmortality()

    # Converting annual probability to monthly rate and then to monthly probability
    df_backgroundmortality1$MonthlyRate <- (-log(1 - df_backgroundmortality1$AnnualProb)) / 12
    df_backgroundmortality1$MonthlyProb <- 1 - exp(-(df_backgroundmortality1$MonthlyRate))

    return(df_backgroundmortality1)
  })

  # Extracting costs
  df_costs <- reactive({
    req(input$costs)
    load_file(input$costs$name, input$costs$datapath)
  })

  # Extracting treatment-related costs
  df_costs_treat <- reactive({
    req(input$costs_treat)
    load_file(input$costs_treat$name, input$costs_treat$datapath)
  })

  # Extracting health utilities
  df_utilities <- reactive({
    req(input$utilities)
    load_file(input$utilities$name, input$utilities$datapath)
  })

  # Extracting utility multiplier for age-based reduction
  df_utility_multiplier <- reactive({
    req(input$utility_multiplier)
    load_file(input$utility_multiplier$name, input$utility_multiplier$datapath)
  })

  # Extracting number of cycles
  n_cycles <- reactive({
    req(input$n_cycles)
  })

  # Extracting discounting rate
  r_annual_discount <- reactive({
    req(input$r_annual_discount)
  })

  # Adjust the transition probabilities for those transitions that have associated hazard ratios
  df_transitionprobs_mod <- reactive({
    # Retrieving the transition probabilities
    df_transitionprobs <- df_transitionrates1()

    df_transitionprobs1 <- merge(df_transitionprobs, df_hazardratios(), by = c("From", "To"), all.x = TRUE)

    # Create a new adjusted monthly probability
    df_transitionprobs1$AdjustedMonthlyProb <- with(df_transitionprobs1, ifelse(is.na(HR), MonthlyProb, 1 - exp(-(MonthlyRate * HR))))

    return(df_transitionprobs1)
  })

  # Transition matrix for control group
  a_transition_matrix_control <- reactive({
    # Retrieving n_states and v_states
    n_states <- extract_modelstates()[["n_states"]]

    v_states <- extract_modelstates()[["v_states"]]

    # Keeping the rows with transition to Death
    # First, retrieving df_hazardratios
    df_hazardratios <- df_hazardratios()

    df_hazardratios1 <- df_hazardratios[df_hazardratios$To == "Death", ]

    # Creating separate dataframes for background mortality for transition where
    # there is an associated HR
    # First, retrieving df_backgroundmortality1
    df_backgroundmortality1 <- df_backgroundmortality1()

    for (i in seq_len(nrow(df_hazardratios1))) {
      name_suffix <- df_hazardratios1[i, "From"]
      new_name <- paste0("df_backgroundmortality1_", name_suffix)
      assign(new_name, df_backgroundmortality1)
    }

    # Adjusting the monthly probabilities to death from different states
    for (i in seq_len(nrow(df_hazardratios1))) {
      from_hr <- df_hazardratios1$From[i]
      hr_multiplier <- df_hazardratios1$HR[i]
      df_name <- paste0("df_backgroundmortality1_", from_hr)
      df_temp <- get(df_name)
      df_temp$MonthlyProb <- (1 - exp(-(df_temp$MonthlyRate * hr_multiplier)))
      assign(df_name, df_temp)
    }

    # Filling the transition matrix for transitions to death
    # First extracting the state names that had a "From" value in df_hazardratios1
    v_states_todeath <- df_hazardratios1$From

    # Removing the death from all states
    v_states_exceptdeath <- v_states[!v_states == "Death"]

    # Identifying the disease states that don't have the hazard ratio associated with death risk
    v_states_nohr <- setdiff(v_states_exceptdeath, v_states_todeath)

    # Create an empty transition matrix (3-d array)
    n_cycles <- n_cycles()
    a_transition_matrix <- array(NA_real_, dim = c(n_states, n_states, n_cycles), dimnames = list(
      from = v_states,
      to = v_states,
      cycle = 1:n_cycles
    ))

    # Filling the transition matrix with values from the transition probabilities table
    df_transitionprobs1 <- df_transitionprobs_mod()
    for (d in 1:dim(a_transition_matrix)[3]) {
      a_transition_matrix[cbind(df_transitionprobs1$From, df_transitionprobs1$To, d)] <- df_transitionprobs1$AdjustedMonthlyProb
    }


    # Filling the transition matrix that don't have additional death risk (no associated hazard ratio)
    for (i in 1:n_cycles) {
      a_transition_matrix[v_states_nohr, "Death", i] <- df_backgroundmortality1$MonthlyProb[i]
    }

    # Filling the transition matrix that have associated hazard ratios
    for (k in 1:length(v_states_todeath)) {
      from_withhr <- df_hazardratios1$From[k]
      df_name_hr <- paste0("df_backgroundmortality1_", from_withhr)
      df_get_hr <- get(df_name_hr)

      for (i in 1:n_cycles) {
        a_transition_matrix[from_withhr, "Death", i] <- df_get_hr$MonthlyProb[i]
      }
    }

    # Filling the transition matrix for transitions from each state to itself (except for death) or another state
    # if there is no transition to itself
    # If the probability is less than zero, replace with zero
    for (j in 1:length(v_states_exceptdeath)) {
      extract_eachstate <- v_states_exceptdeath[j]
      for (k in 1:length(colnames(a_transition_matrix))) {
        col_name_tm <- colnames(a_transition_matrix)[k]
        if (is.na(a_transition_matrix[extract_eachstate, col_name_tm, 1])) {
          a_transition_matrix[extract_eachstate, col_name_tm, ] <- 1 - apply(a_transition_matrix[extract_eachstate, , ], 2, sum, na.rm = TRUE)
          a_transition_matrix[a_transition_matrix[extract_eachstate, col_name_tm, ] < 0] <- 0
        }
      }
    }

    # Transition from death to death
    a_transition_matrix["Death", "Death", ] <- 1

    # Replace any NAs for transition probabilities by 0
    a_transition_matrix[is.na(a_transition_matrix)] <- 0

    # Standardizing the probabilities so that they sum up to 1
    for (i in 1:n_cycles) {
      a_transition_matrix[, , i] <- a_transition_matrix[, , i] / (apply(a_transition_matrix[, , i], MARGIN = 1, FUN = sum, na.rm = TRUE))
    }

    return(a_transition_matrix)
  })

  # Creating the matrix for simulated cohort for control group
  m_state_membership_control <- reactive({
    # Retrieving the transition matrix
    a_transition_matrix <- a_transition_matrix_control()

    # Retrieving n_states and v_states
    n_states <- extract_modelstates()[["n_states"]]

    v_states <- extract_modelstates()[["v_states"]]

    # Retrieving the n_cycles
    n_cycles <- n_cycles()

    # Creating an empty matrix for the simulation cohort
    m_state_membership <- array(NA_real_,
      dim = c(n_cycles, n_states),
      dimnames = list(
        cycle = 1:n_cycles,
        state = v_states
      )
    )

    # Initializing the cohort
    m_state_membership[1, ] <- rep(0, n_states)
    m_state_membership[1, "Hypertension"] <- 1

    # Multiplying the initial cohort with transition matrix
    for (i in 2:n_cycles) {
      m_state_membership[i, ] <- m_state_membership[i - 1, ] %*% a_transition_matrix[, , i - 1]
    }

    return(m_state_membership)
  })

  ######### Treatment group########

  # Adjusting the transition probabilities for treatment effect
  df_transitionprobs1_treat_react <- reactive({
    df_transitionprobs1 <- df_transitionprobs_mod()

    # First keeping only the required columns
    df_transitionprobs1_treat <- subset(df_transitionprobs1, select = c(From, To, AdjustedMonthlyProb))

    # Merging with the df_hazardratios_treat
    # First, retrieving df_hazardratios_treat
    df_hazardratios_treat <- df_hazardratios_treat()
    df_transitionprobs1_treat1 <- merge(df_transitionprobs1_treat, df_hazardratios_treat, by = c("From", "To"), all.x = TRUE)

    # Adjusting the probabilities
    df_transitionprobs1_treat1$TreatAdjustedMonthlyProb <- with(df_transitionprobs1_treat1, ifelse(is.na(HR), AdjustedMonthlyProb, 1 - exp(-(-log(1 - AdjustedMonthlyProb) * HR))))

    return(df_transitionprobs1_treat1)
  })

  # Creating multiple vectors of the disease states
  v_states_relevant_treat <- reactive({
    # Retrieving v_states
    v_states <- extract_modelstates()[["v_states"]]

    # Keeping the rows with transition to Death
    # First, retrieving df_hazardratios
    df_hazardratios <- df_hazardratios()
    df_hazardratios1 <- df_hazardratios[df_hazardratios$To == "Death", ]

    # Extracting the state names that had a "From" value in df_hazardratios1
    v_states_todeath <- df_hazardratios1$From

    # Removing the death from all states
    v_states_exceptdeath <- v_states[!v_states == "Death"]

    # Identifying the disease states that don't have the hazard ratio associated with death risk
    v_states_nohr <- setdiff(v_states_exceptdeath, v_states_todeath)

    # Identifying the transitions to death that have treatment-related hazard ratio
    # First, retrieving df_hazardratios_treat
    df_hazardratios_treat <- df_hazardratios_treat()
    v_hazardratios_treat_death <- df_hazardratios_treat$From[df_hazardratios_treat$To == "Death"]

    # Finding the common states that have no additional background risk of death and
    # no treatment-associated hazard ratio
    v_states_nohr_notreathr <- setdiff(v_states_nohr, v_hazardratios_treat_death)

    # Finding the common states that have no additional background risk of death but have
    # treatment-associated hazard ratio
    v_states_nohr_treathr <- intersect(v_states_nohr, v_hazardratios_treat_death)

    return(list(
      df_hazardratios1 = df_hazardratios1, v_states_todeath = v_states_todeath, v_states_exceptdeath = v_states_exceptdeath,
      v_states_nohr = v_states_nohr, v_hazardratios_treat_death = v_hazardratios_treat_death,
      v_states_nohr_notreathr = v_states_nohr_notreathr, v_states_nohr_treathr = v_states_nohr_treathr
    ))
  })

  # Transition matrix/array for the treatment group
  a_transition_matrix_treat_react <- reactive({
    # Retrieving relevant vectors and dataframes
    df_transitionprobs1_treat1 <- df_transitionprobs1_treat_react()

    n_states <- extract_modelstates()[["n_states"]]

    v_states <- extract_modelstates()[["v_states"]]

    df_hazardratios1 <- v_states_relevant_treat()[["df_hazardratios1"]]

    v_states_todeath <- v_states_relevant_treat()[["v_states_todeath"]]

    v_states_exceptdeath <- v_states_relevant_treat()[["v_states_exceptdeath"]]

    v_states_nohr <- v_states_relevant_treat()[["v_states_nohr"]]

    v_hazardratios_treat_death <- v_states_relevant_treat()[["v_hazardratios_treat_death"]]

    v_states_nohr_notreathr <- v_states_relevant_treat()[["v_states_nohr_notreathr"]]

    v_states_nohr_treathr <- v_states_relevant_treat()[["v_states_nohr_treathr"]]

    n_cycles <- n_cycles()

    df_backgroundmortality1 <- df_backgroundmortality1()

    df_hazardratios_treat <- df_hazardratios_treat()

    # Creating an empty transition matrix/array for the treatment group
    a_transition_matrix_treat <- array(NA_real_, dim = c(n_states, n_states, n_cycles), dimnames = list(
      from = v_states,
      to = v_states,
      cycle = 1:n_cycles
    ))

    # Filling the transition matrix with values from the transition probabilities table
    for (d in 1:dim(a_transition_matrix_treat)[3]) {
      a_transition_matrix_treat[cbind(df_transitionprobs1_treat1$From, df_transitionprobs1_treat1$To, d)] <- df_transitionprobs1_treat1$TreatAdjustedMonthlyProb
    }

    # Filling the transition matrix that don't have additional death risk (no associated hazard ratio) and
    # no associated treatment-related hazard ratio
    for (i in 1:n_cycles) {
      a_transition_matrix_treat[v_states_nohr_notreathr, "Death", i] <- df_backgroundmortality1$MonthlyProb[i]
    }

    # Filling the transition matrix that don't have additional death risk (no associated hazard ratio) but
    # have treatment-related hazard ratio
    for (j in length(v_states_nohr_treathr)) {
      extracttreathr <- df_hazardratios_treat$HR[which(df_hazardratios_treat$From == v_states_nohr_treathr[j] & df_hazardratios_treat$To == "Death")]

      for (i in 1:n_cycles) {
        a_transition_matrix_treat[v_states_nohr_treathr, "Death", i] <- (1 - exp(-(df_backgroundmortality1$MonthlyRate[i] * extracttreathr)))
      }
    }

    # Identifying the states that have associated hazard ratios for mortality but no
    # treatment-related hazard ratio
    v_states_todeath_treatnohr <- setdiff(v_states_todeath, v_hazardratios_treat_death)

    # Identifying the overlap between states that have death-related hazard ratio
    # and treatment-related hazard ratio
    v_states_todeath_treathr <- intersect(v_states_todeath, v_hazardratios_treat_death)

    # Creating multiple dataframes for background mortality from each state that
    # has an associated hazard ratio
    for (i in seq_len(nrow(df_hazardratios1))) {
      name_suffix <- df_hazardratios1[i, "From"]
      new_name <- paste0("df_backgroundmortality1_", name_suffix)
      assign(new_name, df_backgroundmortality1)
    }

    # Adjusting monthly background mortality probabilities using the associated
    # hazard ratios
    for (i in seq_len(nrow(df_hazardratios1))) {
      from_hr <- df_hazardratios1$From[i]
      hr_multiplier <- df_hazardratios1$HR[i]
      df_name <- paste0("df_backgroundmortality1_", from_hr)
      df_temp <- get(df_name)
      df_temp$MonthlyProb <- (1 - exp(-(df_temp$MonthlyRate * hr_multiplier)))
      assign(df_name, df_temp)
    }

    # Creating a function for filling the treatment-related transition matrix
    fill_transition_treat <- function(selected_states) {
      if (length(selected_states) >= 1) {
        for (k in 1:length(selected_states)) {
          from_withhr_treat <- df_hazardratios1$From[k]
          df_name_hr_treat <- paste0("df_backgroundmortality1_", from_withhr_treat)
          df_get_hr_treat <- get(df_name_hr_treat)

          for (i in 1:n_cycles) {
            a_transition_matrix_treat[from_withhr_treat, "Death", i] <- df_get_hr_treat$MonthlyProb[i]
          }
        }
        return(a_transition_matrix_treat)
      } else {
        return(a_transition_matrix_treat)
      }
    }

    # Calling the function to fill the transition matrix that have associated hazard ratios for mortality but
    # no treatment-related hazard ratio
    a_transition_matrix_treat <- fill_transition_treat(v_states_todeath_treatnohr)

    # Calling the function to fill the transition matrix that have associated hazard ratios for mortality and
    # treatment-related hazard ratio
    a_transition_matrix_treat <- fill_transition_treat(v_states_todeath_treathr)

    # Filling the transition matrix for transitions from each state to itself (except for death) or another state
    # if there is no transition to itself
    # If the probability is less than zero, replace with zero
    for (j in 1:length(v_states_exceptdeath)) {
      extract_eachstate <- v_states_exceptdeath[j]
      for (k in 1:length(colnames(a_transition_matrix_treat))) {
        col_name_tm <- colnames(a_transition_matrix_treat)[k]
        if (is.na(a_transition_matrix_treat[extract_eachstate, col_name_tm, 1])) {
          a_transition_matrix_treat[extract_eachstate, col_name_tm, ] <- 1 - apply(a_transition_matrix_treat[extract_eachstate, , ], 2, sum, na.rm = TRUE)
          a_transition_matrix_treat[a_transition_matrix_treat[extract_eachstate, col_name_tm, ] < 0] <- 0
        }
      }
    }

    # Transition from death to death
    a_transition_matrix_treat["Death", "Death", ] <- 1

    # Replace any NAs for transition probabilities by 0
    a_transition_matrix_treat[is.na(a_transition_matrix_treat)] <- 0

    # Standardizing the probabilities so that they sum up to 1
    for (i in 1:n_cycles) {
      a_transition_matrix_treat[, , i] <- a_transition_matrix_treat[, , i] / (apply(a_transition_matrix_treat[, , i], MARGIN = 1, FUN = sum, na.rm = TRUE))
    }

    return(a_transition_matrix_treat)
  })

  # Creating the matrix for simulated cohort of treatment group

  m_state_membership_treat_react <- reactive({
    # Retrieving the transition matrix for treatment group
    a_transition_matrix_treat <- a_transition_matrix_treat_react()

    # Retrieving n_states, v_states, and n_cycles
    n_states <- extract_modelstates()[["n_states"]]

    v_states <- extract_modelstates()[["v_states"]]

    n_cycles <- n_cycles()

    # Creating an empty matrix for the simulated cohort of treatment group
    m_state_membership_treat <- array(NA_real_,
      dim = c(n_cycles, n_states),
      dimnames = list(
        cycle = 1:n_cycles,
        state = v_states
      )
    )

    # Initializing the cohort
    m_state_membership_treat[1, ] <- rep(0, n_states)
    m_state_membership_treat[1, "Hypertension"] <- 1

    # Multiplying the initial cohort with transition matrix
    for (i in 2:n_cycles) {
      m_state_membership_treat[i, ] <- m_state_membership_treat[i - 1, ] %*% a_transition_matrix_treat[, , i - 1]
    }

    return(m_state_membership_treat)
  })

  ############# Healthcare costs and QALYs#############

  # Creating reward matrices/arrays for control and treatment groups
  a_reward_arrays_react <- reactive({
    # Retrieving n_states, v_states, n_cycles, df_costs, df_costs_treat,
    # df_utilities, df_utility_multiplier
    n_states <- extract_modelstates()[["n_states"]]

    v_states <- extract_modelstates()[["v_states"]]

    n_cycles <- n_cycles()

    df_costs <- df_costs()

    df_costs_treat <- df_costs_treat()

    df_utilities <- df_utilities()

    df_utility_multiplier <- df_utility_multiplier()

    # Total number of rewards (costs and qalys are the rewards)
    n_rewards <- 2

    # Creating an empty array for rewards of cost and QALY for control and treatment
    a_state_rewards <- a_state_rewards_treat <-
      array(NA_real_,
        dim = c(n_states, n_rewards, n_cycles),
        dimnames = list(
          state = v_states,
          payoff = c("Cost", "QALY"),
          cycle = 1:n_cycles
        )
      )

    ###### Costs###

    # Filling the reward array for costs corresponding to the states for control group
    matched_cost_index <- match(rownames(a_state_rewards), df_costs$States)

    a_state_rewards[, "Cost", ] <- df_costs$Cost[matched_cost_index]

    # Filling the reward array for costs for treatment group
    matched_cost_index_treat <- match(rownames(a_state_rewards_treat), df_costs$States)
    matched_cost_index_treat1 <- match(rownames(a_state_rewards_treat), df_costs_treat$States)

    a_state_rewards_treat[, "Cost", ] <- df_costs$Cost[matched_cost_index_treat] + df_costs_treat$Cost[matched_cost_index_treat1]

    ###### QALYs###

    # Removing the month column
    df_utility_multiplier$Month <- NULL

    # Calculating QALYs accumulated at the month level
    df_utilities1 <- df_utilities

    df_utilities1$Utility <- df_utilities1$Utility / 12

    # Creating separate dataframes for each health state with utility information created by combining
    # the health utility and the age-based utility multiplier
    for (j in seq_len(nrow(df_utilities1))) {
      state_name <- df_utilities1$States[j]
      df_name <- paste0("q_", state_name)
      assign(df_name, as.data.frame(df_utilities1$Utility[j] * df_utility_multiplier))
    }

    # Filling the reward matrix with QALY info
    for (j in seq_len(nrow(df_utilities1))) {
      q_state_name <- df_utilities1$States[j]
      q_df_name <- paste0("q_", q_state_name)
      q_get_df <- get(q_df_name)

      # Control group
      for (i in 1:n_cycles) {
        a_state_rewards[q_state_name, "QALY", i] <- q_get_df$Multiplier[i]
      }

      # Treatment group
      for (i in 1:n_cycles) {
        a_state_rewards_treat[q_state_name, "QALY", i] <- q_get_df$Multiplier[i]
      }
    }

    # Applying half-life correction to cost and QALYs by reducing to half the rewards in 1st and last cycle
    # Control group
    a_state_rewards[, , 1] <- a_state_rewards[, , 1] * 0.5

    a_state_rewards[, , n_cycles] <- a_state_rewards[, , n_cycles] * 0.5

    # Treatment group
    a_state_rewards_treat[, , 1] <- a_state_rewards_treat[, , 1] * 0.5

    a_state_rewards_treat[, , n_cycles] <- a_state_rewards_treat[, , n_cycles] * 0.5

    return(list(a_state_rewards = a_state_rewards, a_state_rewards_treat = a_state_rewards_treat))
  })

  # Creating trace matrices for rewards for control and treatment groups, populating them, and
  # outputting total costs, incremental costs, and icer
  m_rewards_trace_react <- reactive({
    n_rewards <- 2

    # Retrieving the rewards arrays
    a_state_rewards <- a_reward_arrays_react()[["a_state_rewards"]]

    a_state_rewards_treat <- a_reward_arrays_react()[["a_state_rewards_treat"]]

    # Retrieving simulated cohort matrices
    m_state_membership <- m_state_membership_control()

    m_state_membership_treat <- m_state_membership_treat_react()

    # Retrieving number of cycles
    n_cycles <- n_cycles()

    # Retrieving annual discounting rate and converting to fraction
    r_annual_discount <- r_annual_discount() / 100

    # Creating empty trace matrices for both groups
    m_rewards_trace <- m_rewards_trace_treat <-
      array(NA_real_, dim = c(n_cycles, n_rewards), dimnames = list(cycle = 1:n_cycles, payoff = c("Cost", "QALY")))

    # Multiplying the state membership matrix with the state rewards array for control group
    for (i in 1:n_cycles) {
      m_rewards_trace[i, ] <- m_state_membership[i, ] %*% a_state_rewards[, , i]
    }

    # Multiplying the state membership matrix with the state rewards array for treatment group
    for (i in 1:n_cycles) {
      m_rewards_trace_treat[i, ] <- m_state_membership_treat[i, ] %*% a_state_rewards_treat[, , i]
    }

    # Discounting (converting annual to monthly)
    r_month_discount <- ((1 + r_annual_discount)^(1 / 12)) - 1

    # Creating a vector of discounting rates by cycle
    v_discountcycle <- 1 / ((1 + r_month_discount)^(0:(n_cycles - 1)))

    # Control group
    m_rewards_trace1 <- m_rewards_trace
    m_rewards_trace1[, "Cost"] <- m_rewards_trace1[1:n_cycles, "Cost"] * v_discountcycle[1:n_cycles]
    m_rewards_trace1[, "QALY"] <- m_rewards_trace1[1:n_cycles, "QALY"] * v_discountcycle[1:n_cycles]

    # Treatment group
    m_rewards_trace_treat1 <- m_rewards_trace_treat
    m_rewards_trace_treat1[, "Cost"] <- m_rewards_trace_treat1[1:n_cycles, "Cost"] * v_discountcycle[1:n_cycles]
    m_rewards_trace_treat1[, "QALY"] <- m_rewards_trace_treat1[1:n_cycles, "QALY"] * v_discountcycle[1:n_cycles]

    # Summing cost and qalys across cycles for both groups
    m_rewards_trace_sum <- colSums(m_rewards_trace1)

    m_rewards_trace_treat_sum <- colSums(m_rewards_trace_treat1)

    # Creating one matrix for both groups
    m_rewards_sum_all <- rbind(m_rewards_trace_sum, m_rewards_trace_treat_sum)

    # Adding rownames
    rownames(m_rewards_sum_all) <- c("Control", "Treatment")

    # Calculating the Total costs, Incremental Cost, Incremental Effectiveness (QALY), and Incremental cost-effectiveness ratio (ICER)
    # Costs
    totalcost_control <- m_rewards_sum_all[1, 1]
    totalcost_treat <- m_rewards_sum_all[2, 1]
    inccost <- totalcost_treat - totalcost_control

    # QALYs
    totalqaly_control <- m_rewards_sum_all[1, 2]
    totalqaly_treat <- m_rewards_sum_all[2, 2]
    incqaly <- totalqaly_treat - totalqaly_control

    # ICER
    icer <- inccost / incqaly

    all_outputs <- c(
      totalcost_control = totalcost_control, totalcost_treat = totalcost_treat,
      totalqaly_control = totalqaly_control, totalqaly_treat = totalqaly_treat,
      inccost = inccost, incqaly = incqaly, icer = icer
    )

    return(all_outputs = all_outputs)
  })

  # Creating the output

  output$ICER <- renderTable(
    {
      all_outputs <- m_rewards_trace_react()
      all_outputs
    },
    digits = 8,
    rownames = TRUE
  )
}


# Run the application
shinyApp(ui = ui, server = server)
